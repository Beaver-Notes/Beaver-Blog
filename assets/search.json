[
  
    

    
      {
        "title": "New Year = New Blog!",

        
          "description": "Sat, Jan  4, 2025",
        

        "content": "<p>Here we go again, another blog redesign! <!--more--> Lately, Iâ€™ve been feeling a bit lazy, and while we work on Beaver Pocket, which feels like Half-Life 3, everyoneâ€™s waiting for it, but itâ€™s perpetually stuck in the void of â€˜not quite ready yet.â€™ Anyhow, I thought Iâ€™d write a couple of short blog posts, <em>which this wonâ€™t be</em>, to release in the coming weeks, every now and then, to keep you updated.</p>\n\n<h1 id=\"all-for-a-lazy-saturday\">All for a Lazy Saturday</h1>\n\n<p>Beaver Notes 3.8.0 has finally been released, and Pocket, along with WebDAV, loves keeping me up at night, which also means doomscrolling on Reddit. This time, I stumbled upon Elementary OSâ€™s blog and remembered we have one of our own, though it sure doesnâ€™t feel like it. So, I took on the self-assigned task of redesigning our blog based on Elementaryâ€™s structure and our own design cues. Eight hours later, here we are, with a design that feels like Beaver and inspires me to write a sassy blog post just because. Oh, and Iâ€™ve added RSS and Search, youâ€™re welcome!</p>\n\n<h1 id=\"dont-try-a-half-baked-pie-its-not-worth-it\">Donâ€™t try a half-baked pie, itâ€™s not worth it.</h1>\n\n<p>A couple of weeks ago, we released what should have been the last release candidate for Beaver Pocket. However, it probably wonâ€™t be the last. Weâ€™ve received some feedback and are working on a couple of fixes, most of them platform-specific, like WebDAV support for Android, which is becoming my personal nightmare. I promise this will be our last release candidate, but if Iâ€™ve learned anything from two years of working on Beaver, itâ€™s that itâ€™s better to take your time and test stuff thoroughly rather than releasing something half-baked.</p>\n\n<h1 id=\"drawing-sharing-and-designing\">Drawing, Sharing, and Designing</h1>\n\n<p>Letâ€™s get to the good stuff already! Hereâ€™s what we are working on for both Beaver Notes and Pocket: a drawing component so you can play tic-tac-toe while in class; sharing notes using a custom file format called .bea, which is a fancy word for JSON and the first three letters in Beaver; better PDF exports; improved Markdown export; focus mode, now called reader mode, which makes the note read-only, letting you study even if your cat is on the keyboard; and some UI improvements and butterfly catching. On Pocket specifically, the time the app takes to open has been reduced, it was 3-5 business days before, and the last touch-ups to cloud sync are being made, with WebDAV choosing to straight-up not work on Android but only on iOS. Everybody has their preferences, I guess. Not an Android user myself, but WebDAV picking iOS over Android? Thatâ€™s a bit much.</p>\n\n<h1 id=\"pack-it-up-and-ship-it-to-production\">Pack It Up and Ship It to Production!</h1>\n\n<p>This doesnâ€™t impact the userâ€™s life much, but it makes my life a bit easier, and that is easy releases. By updating our electron-builder config, now the app is packaged, notarized (for all the Mac users), and uploaded straight to GitHub as a draft release. This takes off a good 30 minutes from the packaging process on my end, which is great!</p>\n\n<h1 id=\"thank-you-\">Thank You ðŸ’–</h1>\n\n<p>Thanks to all our users, contributors, and donors for making Beaver possible, and thanks for being part of this amazing community. Hope you enjoyed the article. If youâ€™d like to help build and improve the project donâ€™t hesitate to <a href=\"https://beaver-notes.github.io/Beaver-Docs/docs/dev-docs/Beaver%20Notes/How%20to%20contribure\">Get Involved</a></p>\n\n<h1 id=\"credits\">Credits</h1>\n\n<p><a href=\"https://www.figma.com/community/file/1067604297402260264/macintosh-128k\">Original cover artwork (CC BY 4.0)</a>: credits to <a href=\"http://keeyen.com/\">@keeyen</a></p>\n",

        
          "image": "assets/img/2025/2025-01-04.png",
        

        "url": "/2025/01/04/New-Year-=-New-Blog.html",
        "tags": "",
        "date": "2025-01-04 00:00:00 +0000"
      } ,
    
  
    

    
      {
        "title": "Behind the Scenes",

        
          "description": "Thu, Jun 13, 2024",
        

        "content": "<p>A lot has been going on behind the scenes at Beaver. <!--more--> Our community has grown significantly, as have our projects. In this packed blog post, we will guide you through what we have accomplished over the past few days, weeks, and even months.</p>\n\n<h2 id=\"new-blog-and-docs\">New Blog and Docs</h2>\n\n<p>Letâ€™s start with <a href=\"https://beaver-notes.github.io/Beaver-Blog/\">our blog</a>. As you can see, it has received a huge makeover using Jekyll at its core. Beaver Blog is now easier to maintain and deploy thanks to its markdown nature, which also makes contributions easier.</p>\n\n<p>Next, <a href=\"https://beaver-notes.github.io/Beaver-Docs\">our documentation</a> has also received a complete makeover. We switched from Gitbook to Docusaurus, which, like our blog, uses markdown and a simple folder structure. It can also be deployed on GitHub Pages, which means no hosting fees, allowing us to allocate funds to developing our apps and services. While we were at it, we rewrote our docs to update and correct them.</p>\n\n<h2 id=\"github\">GitHub</h2>\n\n<p>In more recent updates, Beaver Notes now has its own GitHub organization. This provides the project with more credibility, makes it easier for contributors to integrate into the community, and allows us to store all projects in one place.</p>\n\n<h2 id=\"translations\">Translations</h2>\n\n<p>Translations are also a key part of our project. Since our switch to Traduora, Beaver Notes has seen three new language additions: Spanish, Ukrainian, and Dutch. More languages, like Russian, are in the works. We thank our community for their contributions in making Beaver even more accessible.</p>\n\n<h2 id=\"beaver-notes\">Beaver Notes</h2>\n\n<p>Beaver Notes has matured significantly since version 2.x. Thanks to the communityâ€™s feedback and dedication, we have introduced features such as embedded videos and files, allowing you to store everything in one place, thereby improving productivity and convenience. It is also thanks to this feedback that we continue to provide new features and improve existing ones.</p>\n\n<h3 id=\"whats-coming-in-version-330\">Whatâ€™s Coming in Version 3.3.0</h3>\n\n<p><strong>Beaver Notes 3.3.0</strong> will feature an improved code block with an option to copy the content of the block and a new mermaid block that allows users to create pie charts, sequence diagrams, flowcharts, and more. Our major breakthrough, however, is integrations. Third-party apps will be able to create and delete notes and labels. These apps will need to ask permission from the user, who will decide what the app can access and will be able to revoke or disable access at any time.</p>\n\n<h3 id=\"a-playground-for-devs\">A Playground for Devs</h3>\n\n<p>To ensure developers can better integrate their apps with Beaver Notes, we created the <a href=\"https://github.com/Beaver-Notes/Beaver-API-playground\">Beaver API Playground.</a> This playground guides developers in using the API and offers a pre-made codebase to consult whenever needed.</p>\n\n<p>This opens up the field to automations, web clippers, and extensions, enabling users to take full advantage of Beaverâ€™s open-source and community-based nature, making the possibilities endless.</p>\n\n<h2 id=\"beaver-pocket\">Beaver Pocket</h2>\n\n<p>We are near the finish line for the development of Beaver Pocket, which we expect to debut on the App Store, Play Store, and F-Droid by the end of July, if not sooner. With Beaver Pocket, we managed to pack all the features of Beaver Notes into a sleek mobile app while maintaining our high privacy standards by storing everything on the device.</p>\n\n<h3 id=\"what-have-we-been-up-to-lately\">What Have We Been Up To Lately</h3>\n\n<p>In recent weeks, we have introduced cloud sync with WebDAV and Nextcloud, with more platforms to come. Weâ€™ve also improved the interface and incorporated features from Beaver Notes, like the mermaid block to create and edit diagrams, flowcharts, and more, the new code block, math block, video, file block, note linking, and many more features we are sure you will love.</p>\n\n<p>To conclude, even though we have been silent for a while, we have managed to tear down some walls, providing our users with better documentation, a more up-to-date blog, and improved applications and experiences for both users and contributors. We thank you for your support and love for all that we do and love doing.</p>\n",

        
          "image": "assets/img/2024/2024-06-13.png",
        

        "url": "/2024/06/13/Behind-the-scenes.html",
        "tags": "",
        "date": "2024-06-13 00:00:00 +0000"
      } ,
    
  
    

    
      {
        "title": "Security brief for version 2.7.0 and earlier versions",

        
          "description": "Sat, Feb 24, 2024",
        

        "content": "<h1 id=\"security-vulnerability-in-beaver-notes-version-270-and-earlier\">Security Vulnerability in Beaver Notes Version 2.7.0 and Earlier</h1>\n\n<p>During the development of version 2.8.0, the team discovered a vulnerability <!--more--> that allows a bad actor to unlock notes by modifying the unlock logic and inserting the hash key as the password using developer tools.This vulnerability, although not exploitable without access to the deviceâ€™s operating system, still poses a significant threat to user privacy. It has since been fixed, and this article aims to explain the cause of the issue.</p>\n\n<p><strong>TL;DR:</strong> A security issue affecting Beaver Notes 2.7.0 and earlier versions has been discovered. The vulnerability has been patched in version 2.8.0 by encrypting locked note content using AES-128. Please update to the latest version of Beaver Notes if you havenâ€™t already.</p>\n\n<h2 id=\"the-unlock-nightmare\">The Unlock Nightmare</h2>\n\n<p>You can follow the full log of the issue on GitHub if you want to learn more about it. Before delving into the problem, an honorable mention goes to @Bigshans, the team member who discovered it. The issue revolves around the <code class=\"language-plaintext highlighter-rouge\">HomeNoteCard.vue</code> component, which is responsible for displaying notes as cards and managing their states such as Archived, Locked, and Bookmarked. This component used the following code snippet in the unlock logic to compare the userâ€™s inputted password with its hash in localStorage.</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">hashHex</span> <span class=\"o\">=</span> <span class=\"nx\">hashArray</span>\n  <span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">((</span><span class=\"nx\">byte</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">byte</span><span class=\"p\">.</span><span class=\"nf\">toString</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">).</span><span class=\"nf\">padStart</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">0</span><span class=\"dl\">'</span><span class=\"p\">))</span>\n  <span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n\n<span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">hashHex</span> <span class=\"o\">===</span> <span class=\"nx\">sharedKey</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>It was later discovered that the code could be modified through developer tools to accept the hash of the password as the password itself, rendering hashing useless and leaving locked notes vulnerable.</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">let</span> <span class=\"nx\">hashHex</span> <span class=\"o\">=</span> <span class=\"nx\">hashArray</span>\n  <span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">((</span><span class=\"nx\">byte</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">byte</span><span class=\"p\">.</span><span class=\"nf\">toString</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">).</span><span class=\"nf\">padStart</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">0</span><span class=\"dl\">'</span><span class=\"p\">))</span>\n  <span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"dl\">''</span><span class=\"p\">);</span>\n<span class=\"nx\">hashHex</span> <span class=\"o\">=</span> <span class=\"nx\">sharedKey</span><span class=\"p\">;</span>\n<span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nx\">hashHex</span> <span class=\"o\">===</span> <span class=\"nx\">sharedKey</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"first-attempt-password-storage-rethink\">First Attempt: Password Storage Rethink</h2>\n\n<p>At first, we thought the issue was the location of the password, so we built a new method of storing passwords, which was, in itself, secure and consisted of saving the salted hash of the password in the same location as the notes.</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">defineStore</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">pinia</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useStorage</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../composable/storage</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">bcrypt</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">bcryptjs</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">storage</span> <span class=\"o\">=</span> <span class=\"nf\">useStorage</span><span class=\"p\">();</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">usePasswordStore</span> <span class=\"o\">=</span> <span class=\"nf\">defineStore</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">password</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">state</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n    <span class=\"na\">sharedKey</span><span class=\"p\">:</span> <span class=\"dl\">''</span><span class=\"p\">,</span> <span class=\"c1\">// Store the global password</span>\n  <span class=\"p\">}),</span>\n  <span class=\"na\">actions</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"k\">async</span> <span class=\"nf\">retrieve</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">storedPassword</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">storage</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">sharedKey</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">''</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sharedKey</span> <span class=\"o\">=</span> <span class=\"nx\">storedPassword</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sharedKey</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span> <span class=\"k\">catch </span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Error retrieving global password:</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"dl\">''</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"k\">async</span> <span class=\"nf\">setsharedKey</span><span class=\"p\">(</span><span class=\"nx\">password</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">hashedPassword</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">bcrypt</span><span class=\"p\">.</span><span class=\"nf\">hash</span><span class=\"p\">(</span><span class=\"nx\">password</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span> <span class=\"c1\">// Hash the password</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sharedKey</span> <span class=\"o\">=</span> <span class=\"nx\">hashedPassword</span><span class=\"p\">;</span>\n        <span class=\"k\">await</span> <span class=\"nx\">storage</span><span class=\"p\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">sharedKey</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">hashedPassword</span><span class=\"p\">);</span> <span class=\"c1\">// Store the hashed password</span>\n      <span class=\"p\">}</span> <span class=\"k\">catch </span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Error setting global password:</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">);</span>\n        <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"k\">async</span> <span class=\"nf\">isValidPassword</span><span class=\"p\">(</span><span class=\"nx\">enteredPassword</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"nx\">bcrypt</span><span class=\"p\">.</span><span class=\"nf\">compare</span><span class=\"p\">(</span><span class=\"nx\">enteredPassword</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sharedKey</span><span class=\"p\">);</span> <span class=\"c1\">// Compare with hashed global password</span>\n      <span class=\"p\">}</span> <span class=\"k\">catch </span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Error validating password:</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">);</span>\n        <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"k\">async</span> <span class=\"nf\">resetPassword</span><span class=\"p\">(</span><span class=\"nx\">currentPassword</span><span class=\"p\">,</span> <span class=\"nx\">newPassword</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Check if the current password matches the stored one</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">isCurrentPasswordValid</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nf\">isValidPassword</span><span class=\"p\">(</span><span class=\"nx\">currentPassword</span><span class=\"p\">);</span>\n        <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isCurrentPasswordValid</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Current password is incorrect</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// Hash the new password</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">hashedNewPassword</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">bcrypt</span><span class=\"p\">.</span><span class=\"nf\">hash</span><span class=\"p\">(</span><span class=\"nx\">newPassword</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// Update the sharedKey with the new hashed password</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sharedKey</span> <span class=\"o\">=</span> <span class=\"nx\">hashedNewPassword</span><span class=\"p\">;</span>\n        <span class=\"k\">await</span> <span class=\"nx\">storage</span><span class=\"p\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">sharedKey</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">hashedNewPassword</span><span class=\"p\">);</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span> <span class=\"c1\">// Password reset successful</span>\n      <span class=\"p\">}</span> <span class=\"k\">catch </span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Error resetting password:</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">);</span>\n        <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">});</span>\n</code></pre></div></div>\n\n<p>However, we soon discovered that this approach still left room for a bad actor to unlock every note through the console, making locked notes even less secure than before. Therefore, it was time to rebuild our locked notes from the ground up.</p>\n\n<h2 id=\"lock-it-encrypt-it-forget-it\">Lock it, Encrypt it, Forget it</h2>\n\n<p>We have therefore rewritten the methods for locking notes to ensure that no bad actor could ever unlock them. The new locking mechanism employs AES-128 encryption to cryptographically protect the note content. Now, instead of solely relying on a password to unlock a note, we compare the password against its salted hash, adding an additional layer of security.</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"nf\">lockNote</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">password</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">No password provided.</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">encryptedContent</span> <span class=\"o\">=</span> <span class=\"nx\">AES</span><span class=\"p\">.</span><span class=\"nf\">encrypt</span><span class=\"p\">(</span>\n      <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nf\">stringify</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">].</span><span class=\"nx\">content</span><span class=\"p\">),</span>\n      <span class=\"nx\">password</span>\n    <span class=\"p\">).</span><span class=\"nf\">toString</span><span class=\"p\">();</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">].</span><span class=\"nx\">content</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">doc</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">encryptedContent</span><span class=\"p\">]</span> <span class=\"p\">};</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">].</span><span class=\"nx\">isLocked</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isLocked</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"k\">await</span> <span class=\"nx\">storage</span><span class=\"p\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"s2\">`notes.</span><span class=\"p\">${</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">]);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lockStatus</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">locked</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isLocked</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n    <span class=\"k\">await</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">([</span>\n      <span class=\"nx\">storage</span><span class=\"p\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">lockStatus</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lockStatus</span><span class=\"p\">),</span>\n      <span class=\"nx\">storage</span><span class=\"p\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">isLocked</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isLocked</span><span class=\"p\">),</span>\n    <span class=\"p\">]);</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch </span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Error locking note:</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">);</span>\n    <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">async</span> <span class=\"nf\">unlockNote</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">password</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">No password provided.</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">decryptedBytes</span> <span class=\"o\">=</span> <span class=\"nx\">AES</span><span class=\"p\">.</span><span class=\"nf\">decrypt</span><span class=\"p\">(</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">].</span><span class=\"nx\">content</span><span class=\"p\">.</span><span class=\"nx\">content</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n      <span class=\"nx\">password</span>\n    <span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">decryptedContent</span> <span class=\"o\">=</span> <span class=\"nx\">decryptedBytes</span><span class=\"p\">.</span><span class=\"nf\">toString</span><span class=\"p\">(</span><span class=\"nx\">Utf8</span><span class=\"p\">);</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">].</span><span class=\"nx\">content</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"nx\">decryptedContent</span><span class=\"p\">);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">].</span><span class=\"nx\">isLocked</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isLocked</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"k\">await</span> <span class=\"nx\">storage</span><span class=\"p\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"s2\">`notes.</span><span class=\"p\">${</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">]);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lockStatus</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">unlocked</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isLocked</span><span class=\"p\">[</span><span class=\"nx\">id</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"k\">await</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nf\">all</span><span class=\"p\">([</span>\n      <span class=\"nx\">storage</span><span class=\"p\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">lockStatus</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">lockStatus</span><span class=\"p\">),</span>\n      <span class=\"nx\">storage</span><span class=\"p\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">isLocked</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isLocked</span><span class=\"p\">),</span>\n    <span class=\"p\">]);</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch </span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Error unlocking note:</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">);</span>\n    <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>With this new version, the <code class=\"language-plaintext highlighter-rouge\">lockNote</code> function encrypts the note content with a password, updates its status to locked, and stores the encrypted data. Similarly, the <code class=\"language-plaintext highlighter-rouge\">unlockNote</code> function decrypts the content using the password, updates the status to unlocked, and stores the decrypted data. Both functions handle errors and require a password.</p>\n\n<p>In conclusion, this vulnerability is not considered serious and likely cannot be exploited without access to the device, given the offline nature of the app and the fact that notes arenâ€™t stored as plain text, making them not readily accessible. Nevertheless, we remain committed to providing the best privacy and security practices to our users.\n```</p>\n",

        
          "image": "assets/img/2024/2024-02-24.webp",
        

        "url": "/2024/02/24/Security-brief-for-version-2.7.0-and-earlier-versions.html",
        "tags": "",
        "date": "2024-02-24 00:00:00 +0000"
      } 
    
  
]